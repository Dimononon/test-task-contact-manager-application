@using System.Globalization
@model IEnumerable<Contact>

@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Contact Manager</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        .pointer {
            cursor: pointer;
        }

        th {
            cursor: pointer;
        }

    </style>
</head>
<body class="p-4">
    <div class="container">

        <form id="uploadForm" method="post" enctype="multipart/form-data" asp-action="Upload" asp-controller="Home" class="mb-2">
            <input type="file" class="form-control mb-2" id="csvFile" name="file" accept=".csv" required />
            <button type="submit" class="btn btn-primary">Upload CSV</button>
        </form>

        <input id="searchBox" class="form-control mb-2" placeholder="Search..." />

        <table id="contactsTable" class="table table-bordered">
            <thead>
                <tr>
                    <th data-column="Name">Name <span class="sort-indicator"></span></th>
                    <th data-column="DateOfBirth">Date of birth <span class="sort-indicator"></span></th>
                    <th data-column="Married">Married <span class="sort-indicator"></span></th>
                    <th data-column="Phone">Phone <span class="sort-indicator"></span></th>
                    <th data-column="Salary">Salary <span class="sort-indicator"></span></th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null)
                {
                    foreach (var item in Model)
                    {
                        <tr data-id="@item.Id">
                            <td contenteditable="true" data-field="Name">@item.Name</td>
                            <td contenteditable="true" data-field="DateOfBirth">@item.DateOfBirth.ToString("yyyy-MM-dd")</td>
                            <td><input type="checkbox" class="married-checkbox" data-field="Married" @(item.Married ? "checked" : "") /></td>
                            <td contenteditable="true" data-field="Phone">@item.Phone</td>
                            <td contenteditable="true" data-field="Salary">@item.Salary.ToString("F2", CultureInfo.InvariantCulture)</td>
                            <td>
                                <button class="btn btn-sm btn-primary btn-save">Save</button>
                                <button class="btn btn-sm btn-danger btn-delete">Delete</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <div id="status" class="mt-3"></div>
    </div>

    <script>
        //search
        const searchBox = document.getElementById('searchBox');
        searchBox.addEventListener('keyup', () => {
            const value = searchBox.value.toLowerCase();
            document.querySelectorAll('#contactsTable tbody tr').forEach(tr => {
                tr.style.display = tr.textContent.toLowerCase().includes(value) ? '' : 'none';
            });
        });


        //sort
        document.querySelectorAll('#contactsTable th[data-column]').forEach(th => {
            th.addEventListener('click', () => {
                const table = th.closest('table');
                const tbody = table.querySelector('tbody');
                const rows = Array.from(tbody.querySelectorAll('tr'));
                const column = th.dataset.column;
                const asc = !th.classList.contains('asc');

                rows.sort((a, b) => {
                    let aVal = a.querySelector(`[data-field="${column}"]`) ? a.querySelector(`[data-field="${column}"]`).textContent : '';
                    let bVal = b.querySelector(`[data-field="${column}"]`) ? b.querySelector(`[data-field="${column}"]`).textContent : '';

                    if(column === 'Salary') { aVal = parseFloat(aVal); bVal = parseFloat(bVal); }
                    if(column === 'DateOfBirth') { aVal = new Date(aVal); bVal = new Date(bVal); }
                    if(column === 'Married') { aVal = a.querySelector('.married-checkbox')?.checked ? 1 : 0; bVal = b.querySelector('.married-checkbox')?.checked ? 1 : 0; }

                    if(aVal < bVal) return asc ? -1 : 1;
                    if(aVal > bVal) return asc ? 1 : -1;
                    return 0;
                });

                tbody.innerHTML = '';
                rows.forEach(r => tbody.appendChild(r));

                table.querySelectorAll('th').forEach(thr => {
                    thr.classList.remove('asc', 'desc');
                    const indicator = thr.querySelector('.sort-indicator');
                    if(indicator) indicator.textContent = '';
                });
                th.classList.add(asc ? 'asc' : 'desc');
                const indicator = th.querySelector('.sort-indicator');
                if(indicator) indicator.textContent = asc ? '▲' : '▼';
            });
        });


        //update row
        document.querySelectorAll('.btn-save').forEach(button => {
            button.addEventListener('click', () => {
                const row = button.closest('tr');
                const id = row.dataset.id;

                const contact = {
                    Id: id,
                    Name: row.querySelector('[data-field="Name"]').textContent,
                    DateOfBirth: row.querySelector('[data-field="DateOfBirth"]').textContent,
                    Married: row.querySelector('.married-checkbox').checked,
                    Phone: row.querySelector('[data-field="Phone"]').textContent,
                    Salary: parseFloat(row.querySelector('[data-field="Salary"]').textContent)
                };

                fetch('/Home/Edit/' + id, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(contact)
                })
                .then(res => res.ok ? document.getElementById('status').textContent = 'Saved successfully' : res.text().then(text => document.getElementById('status').textContent = text))
                .catch(err => document.getElementById('status').textContent = err.message);
            });
        });


        //delete row
        document.querySelectorAll('.btn-delete').forEach(button => {
            button.addEventListener('click', () => {
                if (!confirm('Delete this row?')) return;
                const row = button.closest('tr');
                const id = row.dataset.id;

                fetch('/Home/Delete/' + id, { method: 'POST' })
                    .then(res => {
                        if (res.ok) { row.remove(); document.getElementById('status').textContent = 'Deleted'; }
                        else document.getElementById('status').textContent = 'Error while deleting';
                    })
                    .catch(() => document.getElementById('status').textContent = 'Server error');
            });
        });


        //upload
        const uploadForm = document.getElementById('uploadForm');
        uploadForm.addEventListener('submit', e => {
            e.preventDefault();
            const formData = new FormData(uploadForm);

            fetch('/Home/Upload', { method: 'POST', body: formData })
                .then(res => res.ok ? location.reload() : document.getElementById('uploadFeedback').textContent = 'Upload failed')
                .catch(() => document.getElementById('uploadFeedback').textContent = 'Server error');
        });
    </script>
</body>
</html>
